; .\Objects\os_timer.SRC generated from: CODE\OS\os_timer.c
; COMPILER INVOKED BY:
;        C:\DevelopTool\Keil_v5\C51\BIN\C51.EXE CODE\OS\os_timer.c OMF2 OPTIMIZE(1,SPEED) BROWSE INCDIR(C:\DevelopTool\Keil_v5\C51\INC\**;.\CODE\APP;.\CODE\BSP;.\CODE\EXT-LIB;.\CODE\OS) DEBUG CODE SYMBOLS PRINT(.\Listings\os_timer.lst) PREPRINT(.\Listings\os_timer.i) SRC(.\Objects\os_timer.SRC)

$NOMOD51

NAME	OS_TIMER

CCF2	BIT	0D8H.2
P0M1	DATA	093H
P1M0	DATA	092H
P2M0	DATA	096H
P1M1	DATA	091H
P0	DATA	080H
P3M0	DATA	0B2H
P2M1	DATA	095H
P1	DATA	090H
P4M0	DATA	0B4H
P3M1	DATA	0B1H
P2	DATA	0A0H
P5M0	DATA	0CAH
P4M1	DATA	0B3H
P3	DATA	0B0H
WKTCH	DATA	0ABH
AC	BIT	0D0H.6
P6M0	DATA	0CCH
P5M1	DATA	0C9H
P4	DATA	0C0H
P7M0	DATA	0E2H
P6M1	DATA	0CBH
P5	DATA	0C8H
P6	DATA	0E8H
P7M1	DATA	0E1H
EA	BIT	0A8H.7
P7	DATA	0F8H
WKTCL	DATA	0AAH
SPCTL	DATA	0CEH
CF	BIT	0D8H.7
CH	DATA	0F9H
P_SW1	DATA	0A2H
P_SW2	DATA	0BAH
DPH1	DATA	0E5H
EADC	BIT	0A8H.5
IE	DATA	0A8H
CL	DATA	0E9H
IAP_CMD	DATA	0C5H
CCAP0H	DATA	0FAH
CCAP1H	DATA	0FBH
DPL1	DATA	0E4H
CCAP2H	DATA	0FCH
ADC_RES	DATA	0BDH
IP2H	DATA	0B6H
IP3H	DATA	0EEH
CCAP0L	DATA	0EAH
CR	BIT	0D8H.6
TA	DATA	0AEH
CCAP1L	DATA	0EBH
CCAPM0	DATA	0DAH
CCAP2L	DATA	0ECH
CCAPM1	DATA	0DBH
INTCLKO	DATA	08FH
CCAPM2	DATA	0DCH
ES	BIT	0A8H.4
PADC	BIT	0B8H.5
IP	DATA	0B8H
ADCCFG	DATA	0DEH
RI	BIT	098H.0
CY	BIT	0D0H.7
TI	BIT	098H.1
IAP_ADDRH	DATA	0C3H
PS	BIT	0B8H.4
SP	DATA	081H
CMOD	DATA	0D9H
CCON	DATA	0D8H
IAP_ADDRL	DATA	0C4H
OV	BIT	0D0H.2
PPCA	BIT	0B8H.7
LIRTRIM	DATA	09EH
PWMCFG01	DATA	0F6H
CMPCR1	DATA	0E6H
CMPCR2	DATA	0E7H
PWMCFG23	DATA	0F7H
ELVD	BIT	0A8H.6
PWMCFG45	DATA	0FEH
P00	BIT	080H.0
ADC_CONTR	DATA	0BCH
SBUF	DATA	099H
P10	BIT	090H.0
PCON	DATA	087H
P01	BIT	080H.1
P20	BIT	0A0H.0
P11	BIT	090H.1
P02	BIT	080H.2
IAP_TPS	DATA	0F5H
P30	BIT	0B0H.0
P21	BIT	0A0H.1
P12	BIT	090H.2
P03	BIT	080H.3
P40	BIT	0C0H.0
P31	BIT	0B0H.1
P22	BIT	0A0H.2
SCON	DATA	098H
P13	BIT	090H.3
P04	BIT	080H.4
P50	BIT	0C8H.0
P41	BIT	0C0H.1
P32	BIT	0B0H.2
P23	BIT	0A0H.3
P14	BIT	090H.4
TMOD	DATA	089H
TCON	DATA	088H
P05	BIT	080H.5
P60	BIT	0E8H.0
P51	BIT	0C8H.1
P42	BIT	0C0H.2
P33	BIT	0B0H.3
P24	BIT	0A0H.4
P15	BIT	090H.5
P06	BIT	080H.6
P70	BIT	0F8H.0
P61	BIT	0E8H.1
P52	BIT	0C8H.2
P43	BIT	0C0H.3
PLVD	BIT	0B8H.6
P34	BIT	0B0H.4
P25	BIT	0A0H.5
P16	BIT	090H.6
P07	BIT	080H.7
P71	BIT	0F8H.1
P62	BIT	0E8H.2
P53	BIT	0C8H.3
P44	BIT	0C0H.4
P35	BIT	0B0H.5
P26	BIT	0A0H.6
P17	BIT	090H.7
P72	BIT	0F8H.2
P63	BIT	0E8H.3
P54	BIT	0C8H.4
P45	BIT	0C0H.5
P36	BIT	0B0H.6
P27	BIT	0A0H.7
P73	BIT	0F8H.3
P64	BIT	0E8H.4
P55	BIT	0C8H.5
P46	BIT	0C0H.6
P37	BIT	0B0H.7
P74	BIT	0F8H.4
P65	BIT	0E8H.5
P56	BIT	0C8H.6
P47	BIT	0C0H.7
P75	BIT	0F8H.5
P66	BIT	0E8H.6
P57	BIT	0C8H.7
P76	BIT	0F8H.6
P67	BIT	0E8H.7
P77	BIT	0F8H.7
IE0	BIT	088H.1
IE1	BIT	088H.3
IE2	DATA	0AFH
B	DATA	0F0H
AUXR	DATA	08EH
IAP_CONTR	DATA	0C7H
ACC	DATA	0E0H
ET0	BIT	0A8H.1
ET1	BIT	0A8H.3
TF0	BIT	088H.5
RSTCFG	DATA	0FFH
IP2	DATA	0B5H
TF1	BIT	088H.7
IP3	DATA	0DFH
RB8	BIT	098H.2
TH0	DATA	08CH
EX0	BIT	0A8H.0
TH1	DATA	08DH
IT0	BIT	088H.0
T2H	DATA	0D6H
EX1	BIT	0A8H.2
TB8	BIT	098H.3
IT1	BIT	088H.2
T3H	DATA	0D4H
P	BIT	0D0H.0
T4H	DATA	0D2H
SM0	BIT	098H.7
TL0	DATA	08AH
SM1	BIT	098H.6
TL1	DATA	08BH
T2L	DATA	0D7H
SM2	BIT	098H.5
T3L	DATA	0D5H
T4L	DATA	0D3H
PT0	BIT	0B8H.1
RS0	BIT	0D0H.3
PT1	BIT	0B8H.3
RS1	BIT	0D0H.4
IAP_DATA	DATA	0C2H
TR0	BIT	088H.4
TR1	BIT	088H.6
WDT_CONTR	DATA	0C1H
PX0	BIT	0B8H.0
PX1	BIT	0B8H.2
IRTRIM	DATA	09FH
PCA_PWM0	DATA	0F2H
PCA_PWM1	DATA	0F3H
PCA_PWM2	DATA	0F4H
DPH	DATA	083H
T4T3M	DATA	0D1H
ADC_RESL	DATA	0BEH
DPL	DATA	082H
SPSTAT	DATA	0CDH
IPH	DATA	0B7H
PWMSET	DATA	0F1H
S2BUF	DATA	09BH
S3BUF	DATA	0ADH
REN	BIT	098H.4
S4BUF	DATA	085H
S2CON	DATA	09AH
DPS	DATA	0E3H
S3CON	DATA	0ACH
S4CON	DATA	084H
AUXINTIF	DATA	0EFH
SADEN	DATA	0B9H
SADDR	DATA	0A9H
IAP_TRIG	DATA	0C6H
F0	BIT	0D0H.5
IRCBAND	DATA	09DH
F1	BIT	0D0H.1
PSW	DATA	0D0H
CCF0	BIT	0D8H.0
CCF1	BIT	0D8H.1
SPDAT	DATA	0CFH
P0M0	DATA	094H
?PR?OS_TIMER_Init?OS_TIMER               SEGMENT CODE 
?PR?OS_TIMER_GetUs?OS_TIMER              SEGMENT CODE 
?ID?OS_TIMER_GetUs?OS_TIMER              SEGMENT IDATA 
?XD?OS_TIMER         SEGMENT XDATA 
?DT?OS_TIMER         SEGMENT DATA 
	EXTRN	CODE (?C?UIDIV)
	PUBLIC	os_tick
	PUBLIC	origin_sp
	PUBLIC	OS_TIMER_GetUs
	PUBLIC	OS_TIMER_Init

	RSEG  ?ID?OS_TIMER_GetUs?OS_TIMER
       tmp1?140:   DS   2

	RSEG  ?ID?OS_TIMER_GetUs?OS_TIMER
       tmp2?141:   DS   2

	RSEG  ?XD?OS_TIMER
      origin_sp:   DS   1

	RSEG  ?DT?OS_TIMER
        os_tick:   DS   4
; /*
; *********************************************************************************************************
; *                                      OPERATING SYSTEM PACKAGE
; *
; * Name    : 系统计时器
; * Version : V1.0
; * Author  : 空格键
; * ----------------------------
; * Note(s) : 使用T0定时器，1ms产生一个中断。使用无符号32位计时，最大可以可运行45.7天溢出。
; * Tip(s)  : 如果要提高时间精度，或者增大运行天数，可使用结构体，{中断计数，计数溢出计数}
; *********************************************************************************************************
; */
; 
; #include "os_timer.h"
; 
; 
; 
; /*
; *********************************************************************************************************
; *                                               DEFINE
; *********************************************************************************************************
; */
; 
; #define T_1MS (65536-SYSclk/1000)   //1ms timer 重载值
; #define T_1US_CNT (SYSclk/1000000)  //1us所属个数
; 
; 
; volatile u32 data os_tick;  //系统计时器，无符号32位(4字节)
; 
; u8 xdata origin_sp; //原始栈指针
; 
; 
; 
; /*
; *********************************************************************************************************
; *                                             INTERRUPT
; *********************************************************************************************************
; */
; 
; /*T0中断服务程序*/      //ASM实现
; // void T0_ISR() interrupt 1
; // {
; //     //==压栈==
; //     //记录当前任务栈顶
; //     if (running_task != NULL)
; //         running_task->stack->sp = (uint8_t idata *)SP;
; 
; //     SP = origin_sp; //这里使用原始栈，为了不破快任务栈
; //     os_tick++;      //tick自增
; 
; //     //任务调度切换
; //     OS_TaskMark();
; //     OS_TaskSwitch();
; //     //SP还原/切换
; //     if (running_task != NULL)
; //     {
; //         origin_sp = SP;
; //         SP = running_task->stack->sp;
; //     }
; //     //==弹栈==
; // }
; 
; /*
; *********************************************************************************************************
; * Description : 系统计时器初始化
; *
; * Caller(s)   : OS_Init()
; *
; * Note(s)     : none.
; *********************************************************************************************************
; */
; void OS_TIMER_Init(void) large

	RSEG  ?PR?OS_TIMER_Init?OS_TIMER
OS_TIMER_Init:
	USING	0
			; SOURCE LINE # 72
; {
;     os_tick = 0ul;
			; SOURCE LINE # 74
	MOV  	os_tick+03H,#00H
	MOV  	os_tick+02H,#00H
	MOV  	os_tick+01H,#00H
	MOV  	os_tick,#00H
; 
;     AUXR |= 0x80;   //定时器0为1T模式
			; SOURCE LINE # 76
	ORL  	AUXR,#080H
;     TMOD &= ~0x0F;  //定时器0模式0：16位自动重载
			; SOURCE LINE # 77
	ANL  	TMOD,#0F0H
;     TL0 = T_1MS;     
			; SOURCE LINE # 78
	MOV  	TL0,#020H
;     TH0 = T_1MS >> 8;
			; SOURCE LINE # 79
	MOV  	TH0,#0D1H
;     // ET0 = 1;        //使能定时器中断
;     EA = 1;         //开总中断
			; SOURCE LINE # 81
	SETB 	EA
;     
;     // TR0 = 1;        //启动定时器
; }
			; SOURCE LINE # 84
	RET  	
; END OF OS_TIMER_Init

; 
; /*
; *********************************************************************************************************
; * Description : 获取系统计时器微秒数
; *
; * Return(s)   : 返回计时器微秒部分，取值[0,999]
; *
; * Note(s)     : none.
; *********************************************************************************************************
; */
; u16 OS_TIMER_GetUs(void)

	RSEG  ?PR?OS_TIMER_GetUs?OS_TIMER
OS_TIMER_GetUs:
	USING	0
			; SOURCE LINE # 95
; {
			; SOURCE LINE # 96
;     u16 idata tmp1 = T_1MS, tmp2 = T_1US_CNT;
			; SOURCE LINE # 97
	MOV  	R0,#LOW (tmp1?140)
	MOV  	@R0,#0D1H
	INC  	R0
	MOV  	@R0,#020H
	MOV  	R0,#LOW (tmp2?141)
	MOV  	@R0,#00H
	INC  	R0
	MOV  	@R0,#0CH
;     return ((TH0 << 8 | TL0) - tmp1) / tmp2;
			; SOURCE LINE # 98
	MOV  	R7,TH0
	MOV  	R6,#00H
	MOV  	A,R7
	MOV  	R7,#00H
	MOV  	R6,A
	MOV  	R5,TL0
	MOV  	R4,#00H
	MOV  	A,R6
	ORL  	A,R4
	MOV  	R6,A
	MOV  	A,R7
	ORL  	A,R5
	MOV  	R7,A
	MOV  	R0,#LOW (tmp1?140)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	CLR  	C
	MOV  	A,R7
	SUBB 	A,R5
	MOV  	R7,A
	MOV  	A,R6
	SUBB 	A,R4
	MOV  	R6,A
	MOV  	R0,#LOW (tmp2?141)
	MOV  	A,@R0
	MOV  	R4,A
	INC  	R0
	MOV  	A,@R0
	MOV  	R5,A
	LCALL	?C?UIDIV
; }
			; SOURCE LINE # 99
	RET  	
; END OF OS_TIMER_GetUs

	END
